$text-primary: #fff;

$mobile: new-breakpoint(max-width 479px 6);
$mobile-wide: new-breakpoint(max-width 767px 6);
$mobile-wide-only: new-breakpoint(min-width 480px max-width 767px 6);
$tablet: new-breakpoint(max-width 959px 12);
$tablet-only: new-breakpoint(min-width 768px max-width 959px 12);
$desktop: new-breakpoint(max-width 1140px 12);
$desktop-only: new-breakpoint(min-width 960px max-width 1140px 12);
$full: new-breakpoint(min-width 1141px 12);


@mixin srcset($prefix, $suffix) {
    @include media($mobile) {
        background-image: url($prefix + 'small' + $suffix);
    }
    @include media($mobile-wide-only) {
        background-image: url($prefix + 'medium' + $suffix);
    }
    @include media($tablet-only) {
        background-image: url($prefix + 'large' + $suffix);
    }
    @include media($desktop-only) {
        background-image: url($prefix + 'large' + $suffix);
    }
    @include media($full) {
        background-image: url($prefix + 'ultra' + $suffix);
    }
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin x-rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}