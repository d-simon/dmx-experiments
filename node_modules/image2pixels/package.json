{
  "name": "image2pixels",
  "version": "0.2.4",
  "description": "Opens and converts image to pixels",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/d-simon/node-image2pixels.git"
  },
  "dependencies": {
    "gd-image2pixels": "~0.1.0",
    "node-gd": "~0.2.3",
    "gd-magicopen": "~0.1.1",
    "extend": "~1.2.1"
  },
  "devDependencies": {
    "underscore": "~1.6.0"
  },
  "keywords": [
    "gd",
    "image",
    "pixels",
    "array"
  ],
  "author": {
    "name": "David Simon",
    "email": "me@davidsimon.ch",
    "url": "https://github.com/d-simon"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/d-simon/node-image2pixels/issues"
  },
  "homepage": "https://github.com/d-simon/node-image2pixels",
  "readme": "image2pixels\n============\n\nOpens and converts image to pixels\n\n## Install\n\n    npm install image2pixels\n\n## Usage\n\n**Syntax:** image2pixels **(** `imagePath`, [`options`], `callback` **)**\n\n### Arguments\n\n * `imagePath` *String*\n * `options`    *Object*  (optional)\n   * `GD` *Boolean* (optional) Wether to return a *GD obj* or *raw array.* Defaults to `false`\n   * `pixelsCallback` *Function*` (optional)  A callback function which receives the raw pixel array before it is returned or processed. Must return the (un)modified array.\n * `callback`    *Function*\n   * `err` - if there was an error otherwise this will be *null*.\n   * `output` - *node-gd object* or array of row objects.\n\n##Example\n\nTaken from the [example/example.js](https://github.com/d-simon/node-image2pixels/blob/master/example/index.js)\n\n```javascript\nvar image2pixels = require('../index.js')\n  , _ = require('underscore')\n  , fs = require('fs');\n\n\n// Output first row to json\nimage2pixels('input.jpg', // { GD: false } // default\n    function (err, output) {\n        if(err) console.log(err);\n        fs.writeFile('output-first-row.json', JSON.stringify(output.slice(0,1), undefined, 2), 'utf8', function (err) {\n            if(err) console.log(err);\n        });\n    });\n\n\n// Save Image as png\nimage2pixels('input.jpg', { GD: true },\n    function (err, output) {\n        if(err) console.log(err);\n        output.savePng('output.png', 0, function (err)\n        {\n            if(err) console.log(err);\n        });\n    });\n\n// Recreate the \"sorted pixels\" effect from node-pixel-sort\nimage2pixels('input.jpg', { GD: true, pixelsCallback: sortPixels },\n    function (err, output) {\n        if(err) console.log(err);\n        output.savePng('output-sorted.png', 0, function (err)\n        {\n            if(err) console.log(err);\n        });\n    });\n\nfunction sortPixels (pixels) {\n    var height = pixels.length\n      , width = pixels[0].length\n      , sortedpixels = _.sortBy(_.flatten(pixels), function (pixel) {\n            return pixel.red + pixel.green + pixel.blue;\n        })\n      , output = []\n    for(var i = 0; i < height; i++) {\n        output.push([]);\n        for(var j = 0; j < width; j++) {\n            var pixel = sortedpixels[i*width + j]\n            output[i].push(pixel);\n        }\n    }\n    return output;\n}\n```",
  "readmeFilename": "README.md",
  "_id": "image2pixels@0.2.4",
  "_from": "image2pixels@0.2.4",
  "dist": {
    "shasum": "9fe389ccefcadcfe90927bf0f3d0282eab56ea99"
  },
  "_resolved": "http://registry.npmjs.org/image2pixels/-/image2pixels-0.2.4.tgz"
}
